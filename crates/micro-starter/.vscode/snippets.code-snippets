{
	// Place your aether-survivors workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"System template": {
		"prefix": "template:system",
		"body": [
			"use super::prelude::*;",
			"",
			"pub struct $1System {$2}",
			"",
			"impl System for $1System {",
			"\t$0",
			"}"
		]
	},
	"Entity template": {
		"prefix": "template:entity",
		"body": [
			"use hecs::DynamicBundle;",
			"",
			"use super::super::system::prelude::*;",
			"",
			"pub fn new($2) -> impl DynamicBundle {",
			"\t(",
			"\t\t$3",
			"\t\t$1Component,",
			"\t)",
			"}",
			"",
			"pub struct $1Component;",
			"",
			"pub struct $1System {}",
			"",
			"impl System for $1System {",
			"\t$0",
			"}"
		]
	},
	"world.query_mut": {
		"prefix": "wqm",
		"body": [
			"for (${3:_}, $4) in world.query_mut::<$1>()$2 {",
			"\t$0",
			"}"
		]
	},
	"world.query": {
		"prefix": "wq",
		"body": [
			"for (${3:_}, $4) in world.query::<$1>()$2.iter() {",
			"\t$0",
			"}"
		]
	},
	"mesh builder": {
		"prefix": "mb",
		"body": [
			"let mut mesh_builder = MeshBuilder::new();",
			"$0",
			"mesh_builder.build(ctx).draw(ctx, DrawParams::new());",
		]
	},
	"DrawParams::new()": {
		"prefix": "dpn",
		"body": "DrawParams::new()"
	},
	"With transform": {
		"prefix": "wt",
		"body": [
			"ctx.with_transform($1, |ctx| -> anyhow::Result<()> {",
			"\t$0",
			"\tOk(())",
			"})?;"
		]
	},
}
